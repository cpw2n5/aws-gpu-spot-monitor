name: Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - 'instance-templates/**'
      - '.github/workflows/infrastructure-deploy.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - 'instance-templates/**'
      - '.github/workflows/infrastructure-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: '1.5.7'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

  tfsec:
    name: TFSec Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: ./terraform

  checkov:
    name: Checkov Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./terraform
          framework: terraform
          output_format: cli
          soft_fail: true

  deploy-dev:
    name: Deploy to Dev
    needs: [terraform-validate, tfsec, checkov]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/environments/dev

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform/environments/dev
        env:
          TF_VAR_folding_at_home_passkey: ${{ secrets.FOLDING_AT_HOME_PASSKEY }}
          TF_VAR_folding_at_home_team_id: ${{ secrets.FOLDING_AT_HOME_TEAM_ID }}

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/environments/dev

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ./terraform/environments/dev
        env:
          TF_VAR_folding_at_home_passkey: ${{ secrets.FOLDING_AT_HOME_PASSKEY }}
          TF_VAR_folding_at_home_team_id: ${{ secrets.FOLDING_AT_HOME_TEAM_ID }}

  deploy-staging:
    name: Deploy to Staging
    needs: [terraform-validate, tfsec, checkov]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/environments/staging

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform/environments/staging
        env:
          TF_VAR_folding_at_home_passkey: ${{ secrets.FOLDING_AT_HOME_PASSKEY }}
          TF_VAR_folding_at_home_team_id: ${{ secrets.FOLDING_AT_HOME_TEAM_ID }}

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/environments/staging

      - name: Terraform Destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ./terraform/environments/staging
        env:
          TF_VAR_folding_at_home_passkey: ${{ secrets.FOLDING_AT_HOME_PASSKEY }}
          TF_VAR_folding_at_home_team_id: ${{ secrets.FOLDING_AT_HOME_TEAM_ID }}

  deploy-prod:
    name: Deploy to Production
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/environments/prod

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform/environments/prod
        env:
          TF_VAR_folding_at_home_passkey: ${{ secrets.FOLDING_AT_HOME_PASSKEY }}
          TF_VAR_folding_at_home_team_id: ${{ secrets.FOLDING_AT_HOME_TEAM_ID }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform/environments/prod

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
        working-directory: ./terraform/environments/prod
        env:
          TF_VAR_folding_at_home_passkey: ${{ secrets.FOLDING_AT_HOME_PASSKEY }}
          TF_VAR_folding_at_home_team_id: ${{ secrets.FOLDING_AT_HOME_TEAM_ID }}