name: Frontend Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run linting
        run: npm run lint || echo "Linting failed but continuing"
        working-directory: ./frontend

      - name: Run tests
        run: npm test -- --watchAll=false
        working-directory: ./frontend

      - name: Build
        run: npm run build
        working-directory: ./frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: frontend/build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Run npm audit
        run: npm audit --audit-level=high
        working-directory: ./frontend

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'aws-gpu-spot-monitor-frontend'
          path: './frontend'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableExperimental
            --suppression .github/workflows/suppression.xml

      - name: Upload dependency check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report-frontend
          path: reports/dependency-check-report.html

  deploy-dev:
    name: Deploy to Dev
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket name
        run: |
          BUCKET_NAME=$(aws ssm get-parameter --name "/aws-gpu-spot-monitor/dev/frontend/bucket-name" --query "Parameter.Value" --output text)
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Get CloudFront distribution ID
        run: |
          DISTRIBUTION_ID=$(aws ssm get-parameter --name "/aws-gpu-spot-monitor/dev/frontend/cloudfront-distribution-id" --query "Parameter.Value" --output text)
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

      - name: Deploy to S3
        run: aws s3 sync build/ s3://${{ env.BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"

  deploy-staging:
    name: Deploy to Staging
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket name
        run: |
          BUCKET_NAME=$(aws ssm get-parameter --name "/aws-gpu-spot-monitor/staging/frontend/bucket-name" --query "Parameter.Value" --output text)
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Get CloudFront distribution ID
        run: |
          DISTRIBUTION_ID=$(aws ssm get-parameter --name "/aws-gpu-spot-monitor/staging/frontend/cloudfront-distribution-id" --query "Parameter.Value" --output text)
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

      - name: Deploy to S3
        run: aws s3 sync build/ s3://${{ env.BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"

  deploy-prod:
    name: Deploy to Production
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 bucket name
        run: |
          BUCKET_NAME=$(aws ssm get-parameter --name "/aws-gpu-spot-monitor/prod/frontend/bucket-name" --query "Parameter.Value" --output text)
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Get CloudFront distribution ID
        run: |
          DISTRIBUTION_ID=$(aws ssm get-parameter --name "/aws-gpu-spot-monitor/prod/frontend/cloudfront-distribution-id" --query "Parameter.Value" --output text)
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

      - name: Deploy to S3
        run: aws s3 sync build/ s3://${{ env.BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths "/*"