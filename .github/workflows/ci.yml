name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'aws-gpu-spot-monitor/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./aws-gpu-spot-monitor
      run: npm ci
    
    - name: Run backend tests
      working-directory: ./aws-gpu-spot-monitor
      run: npm test -- --coverage
    
    - name: Upload backend test coverage
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: aws-gpu-spot-monitor/coverage
  
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm test -- --coverage
    
    - name: Upload frontend test coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend/coverage
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'aws-gpu-spot-monitor/package-lock.json'
    
    - name: Install backend dependencies
      working-directory: ./aws-gpu-spot-monitor
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm ci
    
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Run integration tests
      working-directory: ./aws-gpu-spot-monitor
      run: npm run test:integration
      env:
        NODE_ENV: test
        AWS_REGION: us-east-1
        DYNAMODB_TABLE_PREFIX: test-
  
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'aws-gpu-spot-monitor/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./aws-gpu-spot-monitor
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm ci
    
    - name: Install Playwright
      working-directory: ./aws-gpu-spot-monitor
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      working-directory: ./
      run: bash run-e2e-tests.sh
      env:
        NODE_ENV: test
        AWS_REGION: us-east-1
        DYNAMODB_TABLE_PREFIX: test-
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: aws-gpu-spot-monitor/e2e-test-results
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'aws-gpu-spot-monitor/package-lock.json'
    
    - name: Install backend dependencies
      working-directory: ./aws-gpu-spot-monitor
      run: npm ci
    
    - name: Run backend linting
      working-directory: ./aws-gpu-spot-monitor
      run: npm run lint
    
    - name: Install frontend dependencies
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm run lint
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'aws-gpu-spot-monitor/package-lock.json'
    
    - name: Install backend dependencies
      working-directory: ./aws-gpu-spot-monitor
      run: npm ci
    
    - name: Build backend
      working-directory: ./aws-gpu-spot-monitor
      run: npm run build
    
    - name: Install frontend dependencies
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          aws-gpu-spot-monitor/dist
          aws-gpu-spot-monitor/aws-gpu-spot-monitor/frontend/build
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Deploy to AWS
      working-directory: ./aws-gpu-spot-monitor
      run: npm run deploy
      env:
        NODE_ENV: production
        AWS_REGION: us-east-1